<?php
/**
 * MessagesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Mediana\Sdk
 * @author   Mediana Team
 * @link     https://mediana.ir
 */

/**
 * Mediana sms api
 *
 * Mediana sms api doc </br>  sdks for some programming languages is in out github at https://github.com/ippanelippanel </br> api-key format: <code>Authorization: \"AccessKey your-api-key\"</code>  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the Project document: 1.0.1
 * Generated by: https://mediana.ir
 * Engine version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by Mediana Team (https://mediana.ir).
 * https://mediana.ir
 * Do not edit the class manually.
 */

namespace Mediana\Sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Mediana\Sdk\ApiException;
use Mediana\Sdk\Configuration;
use Mediana\Sdk\HeaderSelector;
use Mediana\Sdk\ObjectSerializer;

/**
 * MessagesApi Class Doc Comment
 *
 * @category Class
 * @package  Mediana\Sdk
 * @author   Mediana Team
 * @link     https://mediana.ir
 */
class MessagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createPattern' => [
            'application/json',
        ],
        'fetchInboxMessages' => [
            'application/json',
        ],
        'getMessageRecipientsStatus' => [
            'application/json',
        ],
        'getSMS' => [
            'application/json',
        ],
        'sendPattern' => [
            'application/json',
        ],
        'sendSMS' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPattern
     *
     * @param  \Mediana\Sdk\Model\PatternToCreate $pattern_to_create parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPattern'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mediana\Sdk\Model\CreatePattern200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response
     */
    public function createPattern($pattern_to_create, string $contentType = self::contentTypes['createPattern'][0])
    {
        list($response) = $this->createPatternWithHttpInfo($pattern_to_create, $contentType);
        return $response;
    }

    /**
     * Operation createPatternWithHttpInfo
     *
     * @param  \Mediana\Sdk\Model\PatternToCreate $pattern_to_create parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPattern'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mediana\Sdk\Model\CreatePattern200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPatternWithHttpInfo($pattern_to_create, string $contentType = self::contentTypes['createPattern'][0])
    {
        $request = $this->createPatternRequest($pattern_to_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Mediana\Sdk\Model\CreatePattern200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\CreatePattern200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\CreatePattern200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\GetAuthorizedUser401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mediana\Sdk\Model\CreatePattern200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\CreatePattern200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\GetAuthorizedUser401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPatternAsync
     *
     * @param  \Mediana\Sdk\Model\PatternToCreate $pattern_to_create parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPattern'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPatternAsync($pattern_to_create, string $contentType = self::contentTypes['createPattern'][0])
    {
        return $this->createPatternAsyncWithHttpInfo($pattern_to_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPatternAsyncWithHttpInfo
     *
     * @param  \Mediana\Sdk\Model\PatternToCreate $pattern_to_create parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPattern'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPatternAsyncWithHttpInfo($pattern_to_create, string $contentType = self::contentTypes['createPattern'][0])
    {
        $returnType = '\Mediana\Sdk\Model\CreatePattern200Response';
        $request = $this->createPatternRequest($pattern_to_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPattern'
     *
     * @param  \Mediana\Sdk\Model\PatternToCreate $pattern_to_create parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPattern'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPatternRequest($pattern_to_create, string $contentType = self::contentTypes['createPattern'][0])
    {

        // verify the required parameter 'pattern_to_create' is set
        if ($pattern_to_create === null || (is_array($pattern_to_create) && count($pattern_to_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pattern_to_create when calling createPattern'
            );
        }


        $resourcePath = '/v1/messages/patterns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pattern_to_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pattern_to_create));
            } else {
                $httpBody = $pattern_to_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchInboxMessages
     *
     * @param  int $page page (optional)
     * @param  int $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchInboxMessages'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mediana\Sdk\Model\FetchInboxMessages200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response
     */
    public function fetchInboxMessages($page = null, $limit = null, string $contentType = self::contentTypes['fetchInboxMessages'][0])
    {
        list($response) = $this->fetchInboxMessagesWithHttpInfo($page, $limit, $contentType);
        return $response;
    }

    /**
     * Operation fetchInboxMessagesWithHttpInfo
     *
     * @param  int $page (optional)
     * @param  int $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchInboxMessages'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mediana\Sdk\Model\FetchInboxMessages200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchInboxMessagesWithHttpInfo($page = null, $limit = null, string $contentType = self::contentTypes['fetchInboxMessages'][0])
    {
        $request = $this->fetchInboxMessagesRequest($page, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Mediana\Sdk\Model\FetchInboxMessages200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\FetchInboxMessages200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\FetchInboxMessages200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\GetAuthorizedUser401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mediana\Sdk\Model\FetchInboxMessages200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\FetchInboxMessages200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\GetAuthorizedUser401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchInboxMessagesAsync
     *
     * @param  int $page (optional)
     * @param  int $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchInboxMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchInboxMessagesAsync($page = null, $limit = null, string $contentType = self::contentTypes['fetchInboxMessages'][0])
    {
        return $this->fetchInboxMessagesAsyncWithHttpInfo($page, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchInboxMessagesAsyncWithHttpInfo
     *
     * @param  int $page (optional)
     * @param  int $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchInboxMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchInboxMessagesAsyncWithHttpInfo($page = null, $limit = null, string $contentType = self::contentTypes['fetchInboxMessages'][0])
    {
        $returnType = '\Mediana\Sdk\Model\FetchInboxMessages200Response';
        $request = $this->fetchInboxMessagesRequest($page, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchInboxMessages'
     *
     * @param  int $page (optional)
     * @param  int $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchInboxMessages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fetchInboxMessagesRequest($page = null, $limit = null, string $contentType = self::contentTypes['fetchInboxMessages'][0])
    {




        $resourcePath = '/v1/messages/inbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMessageRecipientsStatus
     *
     * @param  int $bulk_id bulk_id (required)
     * @param  int $page page (optional)
     * @param  int $limit limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageRecipientsStatus'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mediana\Sdk\Model\GetMessageRecipientsStatus200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response
     */
    public function getMessageRecipientsStatus($bulk_id, $page = null, $limit = null, string $contentType = self::contentTypes['getMessageRecipientsStatus'][0])
    {
        list($response) = $this->getMessageRecipientsStatusWithHttpInfo($bulk_id, $page, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getMessageRecipientsStatusWithHttpInfo
     *
     * @param  int $bulk_id (required)
     * @param  int $page (optional)
     * @param  int $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageRecipientsStatus'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mediana\Sdk\Model\GetMessageRecipientsStatus200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageRecipientsStatusWithHttpInfo($bulk_id, $page = null, $limit = null, string $contentType = self::contentTypes['getMessageRecipientsStatus'][0])
    {
        $request = $this->getMessageRecipientsStatusRequest($bulk_id, $page, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Mediana\Sdk\Model\GetMessageRecipientsStatus200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\GetMessageRecipientsStatus200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\GetMessageRecipientsStatus200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\GetAuthorizedUser401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mediana\Sdk\Model\GetMessageRecipientsStatus200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\GetMessageRecipientsStatus200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\GetAuthorizedUser401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMessageRecipientsStatusAsync
     *
     * @param  int $bulk_id (required)
     * @param  int $page (optional)
     * @param  int $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageRecipientsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageRecipientsStatusAsync($bulk_id, $page = null, $limit = null, string $contentType = self::contentTypes['getMessageRecipientsStatus'][0])
    {
        return $this->getMessageRecipientsStatusAsyncWithHttpInfo($bulk_id, $page, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMessageRecipientsStatusAsyncWithHttpInfo
     *
     * @param  int $bulk_id (required)
     * @param  int $page (optional)
     * @param  int $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageRecipientsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageRecipientsStatusAsyncWithHttpInfo($bulk_id, $page = null, $limit = null, string $contentType = self::contentTypes['getMessageRecipientsStatus'][0])
    {
        $returnType = '\Mediana\Sdk\Model\GetMessageRecipientsStatus200Response';
        $request = $this->getMessageRecipientsStatusRequest($bulk_id, $page, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMessageRecipientsStatus'
     *
     * @param  int $bulk_id (required)
     * @param  int $page (optional)
     * @param  int $limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMessageRecipientsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMessageRecipientsStatusRequest($bulk_id, $page = null, $limit = null, string $contentType = self::contentTypes['getMessageRecipientsStatus'][0])
    {

        // verify the required parameter 'bulk_id' is set
        if ($bulk_id === null || (is_array($bulk_id) && count($bulk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_id when calling getMessageRecipientsStatus'
            );
        }




        $resourcePath = '/v1/messages/{bulk_id}/recipients';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($bulk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bulk_id' . '}',
                ObjectSerializer::toPathValue($bulk_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSMS
     *
     * @param  int $bulk_id bulk_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSMS'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mediana\Sdk\Model\GetSMS200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response
     */
    public function getSMS($bulk_id, string $contentType = self::contentTypes['getSMS'][0])
    {
        list($response) = $this->getSMSWithHttpInfo($bulk_id, $contentType);
        return $response;
    }

    /**
     * Operation getSMSWithHttpInfo
     *
     * @param  int $bulk_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSMS'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mediana\Sdk\Model\GetSMS200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSMSWithHttpInfo($bulk_id, string $contentType = self::contentTypes['getSMS'][0])
    {
        $request = $this->getSMSRequest($bulk_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Mediana\Sdk\Model\GetSMS200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\GetSMS200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\GetSMS200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\GetAuthorizedUser401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mediana\Sdk\Model\GetSMS200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\GetSMS200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\GetAuthorizedUser401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSMSAsync
     *
     * @param  int $bulk_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSMS'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSMSAsync($bulk_id, string $contentType = self::contentTypes['getSMS'][0])
    {
        return $this->getSMSAsyncWithHttpInfo($bulk_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSMSAsyncWithHttpInfo
     *
     * @param  int $bulk_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSMS'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSMSAsyncWithHttpInfo($bulk_id, string $contentType = self::contentTypes['getSMS'][0])
    {
        $returnType = '\Mediana\Sdk\Model\GetSMS200Response';
        $request = $this->getSMSRequest($bulk_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSMS'
     *
     * @param  int $bulk_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSMS'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSMSRequest($bulk_id, string $contentType = self::contentTypes['getSMS'][0])
    {

        // verify the required parameter 'bulk_id' is set
        if ($bulk_id === null || (is_array($bulk_id) && count($bulk_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_id when calling getSMS'
            );
        }


        $resourcePath = '/v1/messages/{bulk_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($bulk_id !== null) {
            $resourcePath = str_replace(
                '{' . 'bulk_id' . '}',
                ObjectSerializer::toPathValue($bulk_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPattern
     *
     * @param  \Mediana\Sdk\Model\PatternToSend $pattern_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPattern'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mediana\Sdk\Model\SendSMS200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response
     */
    public function sendPattern($pattern_to_send, string $contentType = self::contentTypes['sendPattern'][0])
    {
        list($response) = $this->sendPatternWithHttpInfo($pattern_to_send, $contentType);
        return $response;
    }

    /**
     * Operation sendPatternWithHttpInfo
     *
     * @param  \Mediana\Sdk\Model\PatternToSend $pattern_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPattern'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mediana\Sdk\Model\SendSMS200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPatternWithHttpInfo($pattern_to_send, string $contentType = self::contentTypes['sendPattern'][0])
    {
        $request = $this->sendPatternRequest($pattern_to_send, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Mediana\Sdk\Model\SendSMS200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\SendSMS200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\SendSMS200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\GetAuthorizedUser401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mediana\Sdk\Model\SendSMS200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\SendSMS200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\GetAuthorizedUser401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendPatternAsync
     *
     * @param  \Mediana\Sdk\Model\PatternToSend $pattern_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPattern'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPatternAsync($pattern_to_send, string $contentType = self::contentTypes['sendPattern'][0])
    {
        return $this->sendPatternAsyncWithHttpInfo($pattern_to_send, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPatternAsyncWithHttpInfo
     *
     * @param  \Mediana\Sdk\Model\PatternToSend $pattern_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPattern'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPatternAsyncWithHttpInfo($pattern_to_send, string $contentType = self::contentTypes['sendPattern'][0])
    {
        $returnType = '\Mediana\Sdk\Model\SendSMS200Response';
        $request = $this->sendPatternRequest($pattern_to_send, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPattern'
     *
     * @param  \Mediana\Sdk\Model\PatternToSend $pattern_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPattern'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendPatternRequest($pattern_to_send, string $contentType = self::contentTypes['sendPattern'][0])
    {

        // verify the required parameter 'pattern_to_send' is set
        if ($pattern_to_send === null || (is_array($pattern_to_send) && count($pattern_to_send) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pattern_to_send when calling sendPattern'
            );
        }


        $resourcePath = '/v1/messages/patterns/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pattern_to_send)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pattern_to_send));
            } else {
                $httpBody = $pattern_to_send;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendSMS
     *
     * @param  \Mediana\Sdk\Model\MessageToSend $message_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSMS'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Mediana\Sdk\Model\SendSMS200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response
     */
    public function sendSMS($message_to_send, string $contentType = self::contentTypes['sendSMS'][0])
    {
        list($response) = $this->sendSMSWithHttpInfo($message_to_send, $contentType);
        return $response;
    }

    /**
     * Operation sendSMSWithHttpInfo
     *
     * @param  \Mediana\Sdk\Model\MessageToSend $message_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSMS'] to see the possible values for this operation
     *
     * @throws \Mediana\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Mediana\Sdk\Model\SendSMS200Response|\Mediana\Sdk\Model\GetAuthorizedUser401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendSMSWithHttpInfo($message_to_send, string $contentType = self::contentTypes['sendSMS'][0])
    {
        $request = $this->sendSMSRequest($message_to_send, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Mediana\Sdk\Model\SendSMS200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\SendSMS200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\SendSMS200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Mediana\Sdk\Model\GetAuthorizedUser401Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Mediana\Sdk\Model\GetAuthorizedUser401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Mediana\Sdk\Model\SendSMS200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\SendSMS200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Mediana\Sdk\Model\GetAuthorizedUser401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendSMSAsync
     *
     * @param  \Mediana\Sdk\Model\MessageToSend $message_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSMS'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSMSAsync($message_to_send, string $contentType = self::contentTypes['sendSMS'][0])
    {
        return $this->sendSMSAsyncWithHttpInfo($message_to_send, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendSMSAsyncWithHttpInfo
     *
     * @param  \Mediana\Sdk\Model\MessageToSend $message_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSMS'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendSMSAsyncWithHttpInfo($message_to_send, string $contentType = self::contentTypes['sendSMS'][0])
    {
        $returnType = '\Mediana\Sdk\Model\SendSMS200Response';
        $request = $this->sendSMSRequest($message_to_send, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendSMS'
     *
     * @param  \Mediana\Sdk\Model\MessageToSend $message_to_send parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendSMS'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendSMSRequest($message_to_send, string $contentType = self::contentTypes['sendSMS'][0])
    {

        // verify the required parameter 'message_to_send' is set
        if ($message_to_send === null || (is_array($message_to_send) && count($message_to_send) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_to_send when calling sendSMS'
            );
        }


        $resourcePath = '/v1/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($message_to_send)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($message_to_send));
            } else {
                $httpBody = $message_to_send;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
